# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  SSRDOG:  # 订阅名称
    type: http
    url: "https://no3-svip.urlapi-dodo.cyou/s?t=69bfbbdb19ee1929c4d9f47bcb403b39"
    interval: 43200  # 12小时更新一次
    path: ./profiles/SSRDOG.yaml  # 本地缓存路径
    filter: '^(?!.*(GB|Traffic|Expire)).*$'
    header:
      User-Agent: ["Clash.Meta"]
    health-check:
      enable: true  # 开启健康检查
      interval: 600  # 每**分钟检查一次，单位秒
      url: "https://connectivitycheck.gstatic.com/generate_204"  # 测速URL
      timeout: 800  # 超过此时间的节点将被剔除
      max-failures: 2  # 连续N次失败后移除节点
      filter: "avg-rtt<600 && loss<0.5"  #迟延小于**毫秒且丢包率小于**的节点才存活
      expected-status: 204
      persistent: false      # 不保留失败节点
      lazy: false            # 是否立即检查，默认为true,不使用该集合节点时，不进行测试
      #disable-udp: false    # 同时检查UDP可用性
      proxy: DIRECT          # 使用直连进行健康检查（避免代理循环）
  
  NoMoreWalls:  # 订阅名称
    type: http
    url: "https://gh-proxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/refs/heads/master/snippets/nodes.meta.yml"  # 替换成你的订阅地址
    interval: 43200  # 更新间隔时间，单位秒，86400为24小时
    path: ./profiles/MoreWalls.yaml  # 本地缓存路径
    filter: '^(?!.*(@|1x|Hysteria|\b[0-3]\.[0-9]MB\/s\b|_speednode_00[0-5]\d|_(CN|US|JP|CH|GB)_speednode|🌀)).*$'  # 节点过滤
    header:      # 健康检查
      User-Agent: ["Clash.Meta"]
    health-check:
      enable: true   # 开启健康检查
      interval: 600  # 每**分钟检查一次，单位秒
      url: "https://connect.rom.miui.com/generate_204"  # 测速URL
      timeout: 800  # 超过此时间的节点将被剔除
      max-failures: 2  # 连续N次失败后移除节点
      filter: "avg-rtt<600 && loss<0.5"  #迟延小于**毫秒且丢包率小于**的节点才存活
      expected-status: 204
      persistent: false      # 不保留失败节点
      lazy: false            # 立即检查而不等待首次使用，默认为true,不使用该集合节点时，不进行测试
      #disable-udp: false    # 同时检查UDP可用性
      proxy: DIRECT          # 使用直连进行健康检查（避免代理循环）


# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
tcp-concurrent: true
unified-delay: true      # 统一延迟
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:  # 缓存
  store-selected: true  # 储存 API 对策略组的选择，以供下次启动时使用
  store-fake-ip: true   # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
global-ua: clash.meta   # 外部资源下载时使用的的 UA，默认为 clash.meta

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/nikki/run/ui"
external-ui-name: zashboard
external-ui-url: "https://gh-proxy.com/https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# GEO 数据
geodata-mode: false       #geoip 使用文件，mmdb 或者 dat，可选 true/false,true为 dat，此项有默认值 false
geodata-loader: standard  # 加载模式:standard-标准加载器,memconservative-专为内存受限 (小内存) 设备优化的加载器 (默认值)
geo-auto-update: true     # 自动更新
geo-update-interval: 24   # 自动更新间隔时间，单位小时
geox-url:
  geoip: "https://gh-proxy.com/https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat"
  geosite: "https://gh-proxy.com/https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat"
  mmdb: "https://gh-proxy.com/https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/country.mmdb"
  asn: "https://gh-proxy.com/https://github.com/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb"

# 入站  
tun:
  enable: true
  stack: mixed    # 可选：system/gvisor/mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true


# DNS模块
dns:
  enable: true
  listen: '[::]:1053'  # 同时处理IPv6和IPv4
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "*.lan"
    - "+.local"
    - "rule-set:private_domain,cn_domain"
    - "+.gstatic.com"
    - "+.googleapis.com"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
    - "+.openapi.alipan.com"
    - "+.aliyundrive.com"
    - "+.drive.quark.cn"
    - "+.pan.baidu.com"
    - "+.cloud.189.cn"
    - "+.pc.woozooo.com"
    - "+.mi.com"
    - "+.xiaomi.com"
    - "+.qq.com"
    - "+.1panel.live"
    - "+.rat.dev"
    - "+.anye.in"
    - "+.1panelproxy.com"
    - "+.1panel.top"
    - "+.1ms.run"
    - "+.13140521.xyz"
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - 2400:3200::1
  proxy-server-nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
  direct-nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
  direct-nameserver-follow-policy: true # 是否遵循nameserver-policy，默认为不遵守，仅当direct-nameserver不为空时生效
  nameserver-policy:
    '+.alipan.com': 
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    '+.aliyundrive.com':
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    '+.drive.quark.cn':
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    '+.189.cn':
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    '+.pc.woozooo.com':
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    "geosite:cn,private":
      - https://dns.alidns.com/dns-query
      - https://doh.pub/dns-query
    "geosite:geolocation-!cn":
      - https://dns.cloudflare.com/dns-query
      - https://dns.google/dns-query
    "geosite:category-ads-all": rcode://success
  nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
 
# 出站策略

# 内置代理策略：
  # DIRECT-直连
  # REJECT-拒绝
  # REJECT-DROP-抛弃
  # PASS-绕过，匹配规则时跳过此规则
  # COMPATIBLE-兼容，在策略组筛选不出节点时出现，等效 DIRECT
  
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, DIRECT, 🇭🇰 香港, 🇹🇼 台湾, 🇸🇬 新加坡, 🇺🇸 美国, 🇯🇵 日本, 🇰🇷 韩国, 🇷🇺 俄罗斯, 🇩🇪 德国, 🇫🇷 法国, 🇬🇧 英国, 🇨🇳 中国, 🌍 其他地区]}
proxy-groups:
  # 基础组
  - {name: 🚀 默认代理, type: select, proxies: [🔯 故障转移, ♻️ 迟延最低, 🇭🇰 香港, 🇹🇼 台湾, 🇸🇬 新加坡, 🇺🇸 美国, 🇯🇵 日本, 🇰🇷 韩国, 🇷🇺 俄罗斯, 🇩🇪 德国, 🇫🇷 法国, 🇬🇧 英国, 🇨🇳 中国, 🌍 其他地区]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 默认代理, DIRECT, 🇭🇰 香港, 🇹🇼 台湾, 🇸🇬 新加坡, 🇺🇸 美国, 🇯🇵 日本, 🇰🇷 韩国, 🇷🇺 俄罗斯, 🇩🇪 德国, 🇫🇷 法国, 🇬🇧 英国, 🇨🇳 中国, 🌍 其他地区]}
  - {name: 🔯 故障转移, type: fallback, url: "https://connectivitycheck.gstatic.com/generate_204", interval: 300, tolerance: 100, timeout: 800, use: [SSRDOG, NoMoreWalls], lazy: false, filter: "^(?!(维护|下线|测试|过期)).*$", max-failures: 2, failover-delay: 10}
  - {name: ♻️ 迟延最低, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", interval: 600, tolerance: 50, timeout: 600, use: [SSRDOG, NoMoreWalls], lazy: false, filter: "^(?!(直连|过期|维护|测试)).*$", disable-udp: false}
  - {name: 🚨 病毒网站, type: select, proxies: [REJECT, DIRECT]}
  - {name: ⛔ 广告拦截, type: select, proxies: [REJECT-DROP, REJECT, DIRECT, 🚀 默认代理]}
    
  # 服务组
  - {name: 🍀 Openwrt, type: select, proxies: [DIRECT, 🚀 默认代理]}
  - {name: ✈️ Speedtest, type: select, proxies: [DIRECT, 🚀 默认代理]}
  - {name: 🍎 Apple, type: select, proxies: [DIRECT, 🚀 默认代理, 🇭🇰 香港, 🇹🇼 台湾, 🇸🇬 新加坡, 🇺🇸 美国, 🇯🇵 日本, 🇰🇷 韩国, 🇷🇺 俄罗斯, 🇩🇪 德国, 🇫🇷 法国, 🇬🇧 英国, 🇨🇳 中国, 🌍 其他地区]}
  - {name: 🤖 AI, type: select, proxies: [🇺🇸 美国, 🇸🇬 新加坡, 🇯🇵 日本, 🇰🇷 韩国, 🇩🇪 德国, 🇫🇷 法国, 🇬🇧 英国, 🌍 其他地区]}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🪟 MS Update, type: select, proxies: [REJECT, DIRECT, 🚀 默认代理]}
  - {name: 🍀 Google, <<: *pr}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 💶 PayPal, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  
  # 地区组
  - {name: 🇭🇰 香港, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇭🇰|港|HK|Hong\s*Kong'}
  - {name: 🇹🇼 台湾, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇹🇼|台|TW|Taiwan'}
  - {name: 🇸🇬 新加坡, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇸🇬|新|狮城|SG|Singapore'}
  - {name: 🇺🇸 美国, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇺🇸|美|US|U.S.|United States|America'}
  - {name: 🇯🇵 日本, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇯🇵|日|JP|japan'}
  - {name: 🇰🇷 韩国, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇰🇷|韩|KR|Korea'}
  - {name: 🇷🇺 俄罗斯, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇷🇺|俄|RU|Russia'}
  - {name: 🇩🇪 德国, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '^(?=.*(🇩🇪|德|DE|Germany))(?!.*(?<!DE)_speednode).*$'}
  # - {name: 🇨🇦 加拿大, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇨🇦|加|CA|Canada'}
  - {name: 🇫🇷 法国, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇫🇷|法|FR|France'}
  - {name: 🇬🇧 英国, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '🇬🇧|英|GB|UK|England|Great|Kingdom'}
  - {name: 🇨🇳 中国, type: url-test, url: "https://connectivitycheck.gstatic.com/generate_204", use: [SSRDOG, NoMoreWalls], tolerance: 50, interval: 300, lazy: true, filter: '(?=.*(🇨🇳|中国|移动|电信|联通|广东|深圳|浙江|上海|CN|China|CHN))^(?!.*(台|港|澳|Taiwan|TW|HK|Hong\s*Kong|Macao|Macau|MO)).*$'}
  - name: 🌍 其他地区
    type: url-test
    url: "https://connectivitycheck.gstatic.com/generate_204"
    use: [SSRDOG, NoMoreWalls]
    tolerance: 50
    interval: 300
    lazy: true
    exclude-filter: "🇭🇰|港|Hong|🇹🇼|台|TW|Taiwan|🇸🇬|新|SG|Singapore|狮城|🇺🇸|美|US|U.S.|United|America|🇯🇵|日|JP|japan|🇰🇷|韩|KR|Korea|🇷🇺|俄|RU|Russia|🇩🇪|德|DE|Germany|🇫🇷|法|FR|France|🇬🇧|英|GB|UK|England|Great|Kingdom|🇨🇳|中|China|CHN"
  - {name: 🌐 突破锁区, type: select, proxies: [DIRECT, 🚀 默认代理, 🇭🇰 香港, 🇹🇼 台湾, 🇸🇬 新加坡, 🇺🇸 美国, 🇯🇵 日本, 🇰🇷 韩国, 🇷🇺 俄罗斯, 🇩🇪 德国, 🇫🇷 法国, 🇬🇧 英国, 🇨🇳 中国, 🌍 其他地区]}


# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  # 病毒拦截
  - RULE-SET,virus_website,🚨 病毒网站
  
  # 例外\优先
  - RULE-SET,directlite,DIRECT
  
  # 广告\隐私
  - DOMAIN-KEYWORD,js96110,⛔ 广告拦截               # 以权谋私，一边反诈一边推广，恶意封禁正常网站
  - DOMAIN,e.crashlytics.com,⛔ 广告拦截             # 拒绝一切崩溃数据统计、搜集。
  - RULE-SET,adblock_domain,⛔ 广告拦截
  - RULE-SET,adblock_class,⛔ 广告拦截
  - RULE-SET,adblock_ip,⛔ 广告拦截,no-resolve
  - GEOSITE,WIN-SPY,REJECT                           # WIN-SPY 和 WIN-EXTRA 是 Windows 的附加的隐私跟踪域名
  - GEOSITE,WIN-EXTRA,REJECT
  - DOMAIN-SUFFIX,telemetry.microsoft.com,REJECT     # 拦截微软遥测
  - DOMAIN-SUFFIX,doubleclick.net,REJECT             # Google广告
  - DOMAIN-REGEX,(?i)(track|analytics),REJECT        # 拦截包含 ad/track/analytics 恶意特征的域名
    
  # 优先代理
  - RULE-SET,proxylite,🚀 默认代理
  
  # 国内直连
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,cn_domain,DIRECT 
    
  # 常用服务
  - RULE-SET,openwrt,🍀 Openwrt
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - GEOSITE,WIN-UPDATE,🪟 MS Update                   # WIN-UPDATE 是 Windows 的自动更新域名
  - RULE-SET,onedrive_domain,🪟 Microsoft
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
    
  # 全局代理兜底
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,region,🌐 突破锁区
  
  # 兜底IP规则（no-resolve）
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  
  - RULE-SET,cn_ip,DIRECT,no-resolve
  - GEOIP,CN,DIRECT       # 国内IP兜底

  # 终极兜底
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  classical: &classical {type: http, interval: 86400, behavior: classical, format: yaml}
rule-providers: 
  private_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://gh-proxy.com/https://raw.githubusercontent.com/gyhanxiucao/nikki/refs/heads/main/ProxyLite.list"}
  directlite: { <<: *class, url: "https://gh-proxy.com/https://raw.githubusercontent.com/gyhanxiucao/nikki/refs/heads/main/Direct.list"}
  virus_website: { <<: *class, url: "https://gh-proxy.com/https://raw.githubusercontent.com/gyhanxiucao/nikki/refs/heads/main/Virus_Website.list"}
  adblock_domain: {  <<: *domain, url: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ads-all.mrs"}
  adblock_class: { <<: *classical, url: "https://gh-proxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/refs/heads/master/snippets/adblock.yml"}
  region: { <<: *classical, url: "https://gh-proxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/master/snippets/region.yml"}
  ai: { <<: *domain, url: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs"}
  openwrt: { <<: *class, url: "https://gh-proxy.com/https://raw.githubusercontent.com/gyhanxiucao/nikki/refs/heads/main/openwrt.list"}
  youtube_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  adblock_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/ad.mrs"}
  cn_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
